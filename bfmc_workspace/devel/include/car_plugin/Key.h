// Generated by gencpp from file car_plugin/Key.msg
// DO NOT EDIT!


#ifndef CAR_PLUGIN_MESSAGE_KEY_H
#define CAR_PLUGIN_MESSAGE_KEY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace car_plugin
{
template <class ContainerAllocator>
struct Key_
{
  typedef Key_<ContainerAllocator> Type;

  Key_()
    : v(0)  {
    }
  Key_(const ContainerAllocator& _alloc)
    : v(0)  {
  (void)_alloc;
    }



   typedef uint8_t _v_type;
  _v_type v;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(MOVE)
  #undef MOVE
#endif
#if defined(_WIN32) && defined(BRAKE)
  #undef BRAKE
#endif

  enum {
    UNKNOWN = 0u,
    MOVE = 1u,
    BRAKE = 2u,
  };


  typedef boost::shared_ptr< ::car_plugin::Key_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::car_plugin::Key_<ContainerAllocator> const> ConstPtr;

}; // struct Key_

typedef ::car_plugin::Key_<std::allocator<void> > Key;

typedef boost::shared_ptr< ::car_plugin::Key > KeyPtr;
typedef boost::shared_ptr< ::car_plugin::Key const> KeyConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::car_plugin::Key_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::car_plugin::Key_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::car_plugin::Key_<ContainerAllocator1> & lhs, const ::car_plugin::Key_<ContainerAllocator2> & rhs)
{
  return lhs.v == rhs.v;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::car_plugin::Key_<ContainerAllocator1> & lhs, const ::car_plugin::Key_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace car_plugin

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::car_plugin::Key_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::car_plugin::Key_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_plugin::Key_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::car_plugin::Key_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_plugin::Key_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::car_plugin::Key_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::car_plugin::Key_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e0ea58642b36fae1b5437fc7c2183bed";
  }

  static const char* value(const ::car_plugin::Key_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe0ea58642b36fae1ULL;
  static const uint64_t static_value2 = 0xb5437fc7c2183bedULL;
};

template<class ContainerAllocator>
struct DataType< ::car_plugin::Key_<ContainerAllocator> >
{
  static const char* value()
  {
    return "car_plugin/Key";
  }

  static const char* value(const ::car_plugin::Key_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::car_plugin::Key_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message constabt field to describe the key values\n"
"uint8 UNKNOWN=0\n"
"uint8 MOVE=1\n"
"uint8 BRAKE=2\n"
"# Message field \n"
"uint8 v\n"
;
  }

  static const char* value(const ::car_plugin::Key_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::car_plugin::Key_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.v);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Key_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::car_plugin::Key_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::car_plugin::Key_<ContainerAllocator>& v)
  {
    s << indent << "v: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.v);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAR_PLUGIN_MESSAGE_KEY_H
